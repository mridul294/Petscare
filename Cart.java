/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package petscare;

import java.awt.Image;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.*;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils; 
import javax.mail.PasswordAuthentication;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import static petscare.Login.username;
import static petscare.Login.pwd;

/**
 *
 * @author Maryam Tariq
 */
public class Cart extends javax.swing.JFrame {
    
    Connection con;
    Statement st;
    ResultSet rs;
    static double totalAmount = 0;
    static int currentCustID;
    int stockQuantity;
    int selectedID;
    static String[] orderInfo;
    String path;
    String from, to, host, sub, content;
    
    DefaultListModel model = new DefaultListModel();
    
    /**
     * Creates new form Cart
     */
    public Cart() {
        initComponents();
        fillTable();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        addWindowListener(
            new WindowAdapter()
            {
                @Override
                public void windowClosed(WindowEvent event)
                {
                    closeDB();
                    System.exit(0);
                }
            }
        );
    }
    
        public void fillTable()
    {
        try
        {
            con = DriverManager.getConnection("jdbc:derby://localhost:1527/PetsCare","root","root");
            st=con.createStatement();
            rs=st.executeQuery("SELECT PetID, Pet_Name, Price FROM Pet");

            cartTable.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(this, ex);
        }
    }
    
    public void closeDB()
    {
        try
        {
            rs.close();
            st.close();
            con.close();
        }
        
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(this, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        backLabel = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        filterBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        billList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        priceTxt = new javax.swing.JTextField();
        nameTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        checkoutButton = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        quantityBox = new javax.swing.JComboBox<>();
        imageLable2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cart");
        setMaximumSize(new java.awt.Dimension(900, 550));
        setMinimumSize(new java.awt.Dimension(900, 550));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setMaximumSize(new java.awt.Dimension(900, 550));
        jPanel1.setMinimumSize(new java.awt.Dimension(900, 550));
        jPanel1.setName(""); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 550));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 27)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 255));
        jLabel1.setText("Cart");

        backLabel.setForeground(new java.awt.Color(144, 143, 150));
        backLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/petscare/Icon/back (1) (1) (1) (1).png"))); // NOI18N
        backLabel.setText(" BACK");
        backLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backLabelMouseClicked(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(144, 143, 150));
        jLabel15.setText("Filter By");

        jLabel16.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(193, 193, 255));
        jLabel16.setText("PRODUCTS LIST");

        filterBox.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        filterBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pet", "Food", "Supplies" }));
        filterBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterBoxItemStateChanged(evt);
            }
        });

        billList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        billList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billListMouseClicked(evt);
            }
        });
        billList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                billListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(billList);

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Price", "Type", "Quantity"
            }
        ));
        cartTable.setRowHeight(20);
        cartTable.setSelectionBackground(new java.awt.Color(204, 204, 255));
        cartTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cartTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(cartTable);

        jLabel17.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(193, 193, 255));
        jLabel17.setText("BILL LIST");

        priceTxt.setEditable(false);
        priceTxt.setColumns(14);

        nameTxt.setEditable(false);
        nameTxt.setColumns(14);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(144, 143, 150));
        jLabel5.setText("Price");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(144, 143, 150));
        jLabel6.setText("Name");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(144, 143, 150));
        jLabel8.setText("Quantity");

        addButton.setBackground(new java.awt.Color(78, 95, 200));
        addButton.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        clearButton.setBackground(new java.awt.Color(78, 95, 200));
        clearButton.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        clearButton.setForeground(new java.awt.Color(255, 255, 255));
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        removeButton.setBackground(new java.awt.Color(78, 95, 200));
        removeButton.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        removeButton.setForeground(new java.awt.Color(255, 255, 255));
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        checkoutButton.setBackground(new java.awt.Color(78, 95, 200));
        checkoutButton.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        checkoutButton.setForeground(new java.awt.Color(255, 255, 255));
        checkoutButton.setText("Checkout");
        checkoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutButtonActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(193, 193, 255));
        jLabel18.setText("Total Price : ");

        priceLabel.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        priceLabel.setForeground(new java.awt.Color(193, 193, 255));
        priceLabel.setText("?");

        quantityBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        imageLable2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        imageLable2.setForeground(new java.awt.Color(144, 143, 150));
        imageLable2.setText("                 No Image");
        imageLable2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(backLabel))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel6))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel5))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 60, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(404, 404, 404))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(priceTxt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameTxt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quantityBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel17)
                                .addGap(244, 244, 244))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(151, 151, 151))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(42, 42, 42)
                        .addComponent(filterBox, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(185, 185, 185))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addGap(31, 31, 31)
                        .addComponent(clearButton))
                    .addComponent(imageLable2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeButton)
                        .addGap(40, 40, 40)
                        .addComponent(checkoutButton)
                        .addGap(45, 45, 45))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(backLabel))
                .addGap(7, 7, 7)
                .addComponent(jLabel16)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(quantityBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(removeButton)
                            .addComponent(checkoutButton)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel18)
                                .addComponent(priceLabel)))
                        .addGap(0, 53, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addButton)
                            .addComponent(clearButton))
                        .addGap(18, 18, 18)
                        .addComponent(imageLable2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 930, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(944, 610));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backLabelMouseClicked
        // TODO add your handling code here:
        
        int confirm = JOptionPane.showConfirmDialog(this, "Do you want to go back? Your selected items will be LOST!", "Lost Cart", JOptionPane.YES_NO_OPTION);
            if(confirm == JOptionPane.YES_OPTION)
            {
                totalAmount = 0;
                
                this.setVisible(false);
                Customer cust = new Customer();
                cust.setVisible(true);
            }
    }//GEN-LAST:event_backLabelMouseClicked

    private void cartTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartTableMouseClicked
        // TODO add your handling code here:
        
        try
        {
            if(filterBox.getSelectedIndex() == 0)
            {
                int selectRow = cartTable.getSelectedRow();
                int SelectID = Integer.parseInt(cartTable.getModel().getValueAt(selectRow,0).toString());

                String query = "SELECT * FROM Pet WHERE PetID = " + SelectID;
                rs = st.executeQuery(query);

                rs.next();
                nameTxt.setText(rs.getString("Pet_Name"));
                priceTxt.setText(String.format("%.2f", rs.getDouble("Price")));
                selectedID = rs.getInt("PetID");  
                
                String path = rs.getString("ImagePath");
                ImageIcon image = new ImageIcon(getClass().getResource("Icon/" + path));
                Image img = image.getImage();
                Image imgImage = img.getScaledInstance(imageLable2.getWidth(),imageLable2.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon scaledIcon = new ImageIcon(imgImage);
                imageLable2.setIcon(scaledIcon);
                imageLable2.setText(rs.getString("ImagePath"));
            }
            
            else if (filterBox.getSelectedIndex() == 1)
            {
                int selectRow = cartTable.getSelectedRow();
                int SelectID = Integer.parseInt(cartTable.getModel().getValueAt(selectRow,0).toString());

                String query = "SELECT * FROM Food WHERE FoodID = " + SelectID;
                rs = st.executeQuery(query);

                rs.next();
                nameTxt.setText(rs.getString("Food_Name"));
                priceTxt.setText(String.format("%.2f", rs.getDouble("Price")));
                stockQuantity = rs.getInt("Quantity");
                selectedID = rs.getInt("FoodID");
                
                String path = rs.getString("ImagePath");
                ImageIcon image = new ImageIcon(getClass().getResource("Icon/" + path));
                Image img = image.getImage();
                Image imgImage = img.getScaledInstance(imageLable2.getWidth(),imageLable2.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon scaledIcon = new ImageIcon(imgImage);
                imageLable2.setIcon(scaledIcon);
                imageLable2.setText(rs.getString("ImagePath"));
            }
            else
            {
                int selectRow = cartTable.getSelectedRow();
                int SelectID = Integer.parseInt(cartTable.getModel().getValueAt(selectRow,0).toString());

                String query = "SELECT * FROM Supplies WHERE SuppliesID = " + SelectID;
                rs = st.executeQuery(query);

                rs.next();
                nameTxt.setText(rs.getString("Supplies_Name"));
                priceTxt.setText(String.format("%.2f", rs.getDouble("Price")));
                stockQuantity = rs.getInt("Quantity");
                selectedID = rs.getInt("SuppliesID");
                
                String path = rs.getString("ImagePath");
                ImageIcon image = new ImageIcon(getClass().getResource("Icon/" + path));
                Image img = image.getImage();
                Image imgImage = img.getScaledInstance(imageLable2.getWidth(),imageLable2.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon scaledIcon = new ImageIcon(imgImage);
                imageLable2.setIcon(scaledIcon);
                imageLable2.setText(rs.getString("ImagePath"));
            }
        }
        
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(this, ex);
        }

        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this, ex);
        }
    }//GEN-LAST:event_cartTableMouseClicked

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        nameTxt.setText("");
        priceTxt.setText("");
        imageLable2.setIcon(null);
        imageLable2.setText("                 No Image");
        quantityBox.setSelectedIndex(0);
    }//GEN-LAST:event_clearButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            if(nameTxt.getText().isEmpty() || priceTxt.getText().isEmpty())
                JOptionPane.showMessageDialog(this, "Please Select Proudect to Add", "Proudect Not Choose", JOptionPane.WARNING_MESSAGE);
            
            else if(Integer.parseInt(quantityBox.getSelectedItem().toString()) > stockQuantity && (filterBox.getSelectedIndex() == 1 || filterBox.getSelectedIndex() == 2))
                JOptionPane.showMessageDialog(this, "No Enough Stock", "Quantity Error", JOptionPane.WARNING_MESSAGE);
            else
            {
                double price = Double.parseDouble(priceTxt.getText());
                int quantity = Integer.parseInt(quantityBox.getSelectedItem().toString());
                double tempPrice = price * quantity;

                totalAmount += tempPrice;
                totalAmount = Math.round(totalAmount * 100.0)/100.0;

                priceLabel.setText(String.valueOf(totalAmount) + " SAR");
                
                if(filterBox.getSelectedIndex() == 1 || filterBox.getSelectedIndex() == 2)
                {
                    String tableName = filterBox.getSelectedItem().toString();
                    int updateQuantity = stockQuantity - quantity;
                    String proudectID = filterBox.getSelectedItem().toString().concat("ID");
                    st.executeUpdate("UPDATE " + tableName + " SET Quantity = " + updateQuantity + " WHERE " + proudectID + " = " + selectedID);
                    
                    closeDB();
                    if (filterBox.getSelectedIndex() == 1)
                    {
                        try
                        {
                            con = DriverManager.getConnection("jdbc:derby://localhost:1527/PetsCare","root","root");
                            st=con.createStatement();
                            rs=st.executeQuery("SELECT FoodID, Food_Name, Price, Quantity FROM Food WHERE Quantity > 0");

                            cartTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }
                        catch(SQLException ex)
                        {
                            JOptionPane.showMessageDialog(this, ex);
                        }
                    }

                    else
                    {
                        try
                        {
                            con = DriverManager.getConnection("jdbc:derby://localhost:1527/PetsCare","root","root");
                            st=con.createStatement();
                            rs=st.executeQuery("SELECT SuppliesID, Supplies_Name, Price, Quantity FROM Supplies WHERE Quantity > 0");

                            cartTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }
                        catch(SQLException ex)
                        {
                            JOptionPane.showMessageDialog(this, ex);
                        }
                    }
                }
                
                String order = nameTxt.getText() + "             " + priceTxt.getText() + " SAR             "  + quantityBox.getSelectedItem().toString();
                model.addElement(order);
                billList.setModel(model);

                if(billList.getModel().getSize() == 0)
                    totalAmount = 0;
                
                nameTxt.setText("");
                priceTxt.setText("");
                quantityBox.setSelectedIndex(0);
                imageLable2.setIcon(null);
                imageLable2.setText("                 No Image");
            }
        }

        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        String selectedRow, exteactNum, exteactName;
        
        if(billList.getModel().getSize() == 0)
            JOptionPane.showMessageDialog(this, "There is nothing to remove", "Empty Cart", JOptionPane.WARNING_MESSAGE);
        else if(billList.getSelectedIndex() == -1)
            JOptionPane.showMessageDialog(this, "Please Select form List", "Error: Item to be Removed not Selected", JOptionPane.WARNING_MESSAGE);
        else
        {
            selectedRow = (String) billList.getSelectedValue();
            exteactNum = selectedRow.replaceAll("[^0-9].[^0-9]", "");
            exteactNum = exteactNum.trim();
            String[] numList = exteactNum.split("  ");
            
            exteactName = selectedRow.replaceAll("[0-9]", "").replaceAll("SAR", "").replace(".", "").replaceAll("                           ", "");

            model.removeElementAt(billList.getSelectedIndex());
            
            double priceValue = Double.parseDouble(numList[0]);
            int quantityValue = Integer.parseInt(numList[1]);
            double tempPrice = priceValue * quantityValue;

            totalAmount -= tempPrice;
            totalAmount = Math.round(totalAmount * 100.0)/100.0;
            
            String tableName = filterBox.getSelectedItem().toString();
            String proudectName = filterBox.getSelectedItem().toString().concat("_Name");
            
            try
            {
                rs = st.executeQuery("SELECT Quantity FROM Food WHERE Food_Name = '" + exteactName + "' AND Price = " + priceValue);
                if(rs.next())
                {
                    int updateQuantity = rs.getInt(1) + quantityValue;
                    st.executeUpdate("UPDATE Food SET Quantity = " + updateQuantity + " WHERE Food_Name = '" + exteactName + "' AND Price = " + priceValue);
                }
                rs = st.executeQuery("SELECT Quantity FROM Supplies WHERE Supplies_Name = '" + exteactName + "' AND Price = " + priceValue);
                if(rs.next())
                {
                    int updateQuantity = rs.getInt(1) + quantityValue;
                    st.executeUpdate("UPDATE Supplies SET Quantity = " + updateQuantity + " WHERE Supplies_Name = '" + exteactName + "' AND Price = " + priceValue);
                }
                
                closeDB();
                if(filterBox.getSelectedIndex() == 0)
                {
                    try
                    {
                        con = DriverManager.getConnection("jdbc:derby://localhost:1527/PetsCare","root","root");
                        st=con.createStatement();
                        rs=st.executeQuery("SELECT PetID, Pet_Name, Price FROM Pet");

                        cartTable.setModel(DbUtils.resultSetToTableModel(rs));
                    }
                    catch(SQLException ex)
                    {
                        JOptionPane.showMessageDialog(this, ex);
                    }
                }

                else if (filterBox.getSelectedIndex() == 1)
                {
                    try
                    {
                        con = DriverManager.getConnection("jdbc:derby://localhost:1527/PetsCare","root","root");
                        st=con.createStatement();
                        rs=st.executeQuery("SELECT FoodID, Food_Name, Price, Quantity FROM Food WHERE Quantity > 0");

                        cartTable.setModel(DbUtils.resultSetToTableModel(rs));
                    }
                    catch(SQLException ex)
                    {
                        JOptionPane.showMessageDialog(this, ex);
                    }
                }

                else
                {
                    try
                    {
                        con = DriverManager.getConnection("jdbc:derby://localhost:1527/PetsCare","root","root");
                        st=con.createStatement();
                        rs=st.executeQuery("SELECT SuppliesID, Supplies_Name, Price, Quantity FROM Supplies WHERE Quantity > 0");

                        cartTable.setModel(DbUtils.resultSetToTableModel(rs));
                    }
                    catch(SQLException ex)
                    {
                        JOptionPane.showMessageDialog(this, ex);
                    }
                }
            }
            catch(SQLException ex)
            {
                JOptionPane.showMessageDialog(this, ex);
            }
            
            imageLable2.setIcon(null);
            imageLable2.setText("                 No Image");
                
            if(billList.getModel().getSize() == 0)
                totalAmount = 0;

            priceLabel.setText(String.valueOf(totalAmount) + " SAR");
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void checkoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutButtonActionPerformed
        // TODO add your handling code here:
        if(totalAmount == 0)
            JOptionPane.showMessageDialog(this, "There is nothing to checkout. Please add a product to your Cart!", "Empty Cart", JOptionPane.ERROR_MESSAGE);
        else
        {
            String orderid = "", currentCustName = "", currentCustEmail = "";
            try
            {
                orderInfo = new String[billList.getModel().getSize()];
                for(int i = 0; i < billList.getModel().getSize(); i++)
                {
                    String item = billList.getModel().getElementAt(i);
                    orderInfo[i] = item;
                }
                
                con = DriverManager.getConnection("jdbc:derby://localhost:1527/PetsCare","root","root");
                st=con.createStatement();
                rs=st.executeQuery("SELECT CustomerID FROM Customer WHERE UserName = '" + username + "' AND Password = '" + pwd + "'");

                rs.next();
                currentCustID = rs.getInt("CustomerID");

                st.executeUpdate("INSERT INTO Orders(CustomerID, TotalAmount) VALUES (" + currentCustID + ", " + totalAmount + ")");

                OrderInformation info = new OrderInformation();
                this.setVisible(false);
                info.setVisible(true);

            }
            catch (SQLException ex)
            {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
            
            try
            {
                con = DriverManager.getConnection("jdbc:derby://localhost:1527/PetsCare","root","root");
                st=con.createStatement();
                rs=st.executeQuery("SELECT OrderID FROM Orders WHERE CustomerID = " + currentCustID + " AND TotalAmount = " + totalAmount );

                rs.next();
                orderid = String.valueOf(rs.getInt("OrderID"));
                priceLabel.setText(String.valueOf(totalAmount) + " SAR");

                rs=st.executeQuery("SELECT FirstName, LastName, Email FROM Customer WHERE CustomerID = " + currentCustID );
                rs.next();
                currentCustName = rs.getString("FirstName").concat(" ").concat(rs.getString("LastName"));
                currentCustEmail = rs.getString("Email");

            }
            catch (SQLException ex)
            {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
            
            from = "5PetsCare5@gmail.com";
            to = currentCustEmail;
            host = "localhost";
            sub = "Thanks for your order!";
            content = "Hi Maryam, your order has been received.";

            Properties properties = new Properties();

            properties.put("mail.smtp.host", "smtp.gmail.com");
            properties.put("mail.smtp.port", "25");
            properties.put("mail.smtp.auth", "true");
            properties.put("mail.smtp.starttls.enable", "true");
            properties.put("mail.smtp.ssl.protocols", "TLSv1.2");


            Session session = Session.getDefaultInstance(properties, new javax.mail.Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication()
                {
                    return new PasswordAuthentication("5PetsCare5@gmail.com", "12345Pet");
                }
            });

            try
            {
                MimeMessage message = new MimeMessage(session);
                message.setFrom(new InternetAddress(from));
                message.setRecipient(Message.RecipientType.TO, new InternetAddress(to));
                message.setSubject(sub);
                String htmlCode = "<h1> Pets Care </h1> <br/> <h2><b> Hi " + currentCustName +", your order has been received. </b></h2> <b><h2>Order No.: " + orderid + "</h2></b> "
                        + "<p>Thank you for ordering from Pets Care. This message confirms that we have received your Order</p> <p> by the way, we love your choice!  We would like to inform you that your order is in preparation,</p> <p>as soon as the order has been shipped we will notify you.</p>"
                        + "<br/><br/> <h2><b> For Any Question?</b></h2> <p><b>For everything else you want to know...</b></p> <p><b>Contact Us: 5PetsCare5@gmail.com </b></p></br> <h3>Visit Us Again!</h3><h3>Pets Care Team</h3>";
                message.setContent(htmlCode, "text/html");
                //message.setText(content);
                Transport.send(message);
                System.out.println("Success");
            }

            catch(Exception ex)
            {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_checkoutButtonActionPerformed

    private void billListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_billListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_billListValueChanged

    private void billListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billListMouseClicked
        // TODO add your handling code here:
            String selectedRow = (String) billList.getSelectedValue();
            String exteactNum = selectedRow.replaceAll("[^0-9].[^0-9]", "");
            exteactNum = exteactNum.trim();
            String[] numList = exteactNum.split("  ");
            
            String exteactName = selectedRow.replaceAll("[0-9]", "").replaceAll("SAR", "").replace(".", "").replaceAll("                           ", "");
            double priceValue = Double.parseDouble(numList[0]);
            
            if(!billList.isSelectionEmpty())
            {
                try
                {
                    con = DriverManager.getConnection("jdbc:derby://localhost:1527/PetsCare","root","root");
                    st=con.createStatement();
                    rs = st.executeQuery("SELECT ImagePath FROM Pet WHERE Pet_Name = '" + exteactName + "' AND Price = " + priceValue);
                    if(rs.next())
                        path = rs.getString(1);
                    rs = st.executeQuery("SELECT ImagePath FROM Food WHERE Food_Name = '" + exteactName + "' AND Price = " + priceValue);
                    if(rs.next())
                        path = rs.getString(1);
                    rs = st.executeQuery("SELECT ImagePath FROM Supplies WHERE Supplies_Name = '" + exteactName + "' AND Price = " + priceValue);
                    if(rs.next())
                        path = rs.getString(1);

                    ImageIcon image = new ImageIcon(getClass().getResource("Icon/" + path));
                    Image img = image.getImage();
                    Image imgImage = img.getScaledInstance(imageLable2.getWidth(),imageLable2.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon scaledIcon = new ImageIcon(imgImage);
                    imageLable2.setIcon(scaledIcon);
                    imageLable2.setText(path);
                }

                catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(this, ex);
                }
            }
    }//GEN-LAST:event_billListMouseClicked

    private void filterBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterBoxItemStateChanged
        // TODO add your handling code here:
        
        nameTxt.setText("");
        priceTxt.setText("");
        quantityBox.setSelectedIndex(0);
        imageLable2.setIcon(null);
        imageLable2.setText("                 No Image");

        if(filterBox.getSelectedIndex() == 0)
        {
            try
            {
                con = DriverManager.getConnection("jdbc:derby://localhost:1527/PetsCare","root","root");
                st=con.createStatement();
                rs=st.executeQuery("SELECT PetID, Pet_Name, Price FROM Pet");

                cartTable.setModel(DbUtils.resultSetToTableModel(rs));
            }
            catch(SQLException ex)
            {
                JOptionPane.showMessageDialog(this, ex);
            }
        }
        
        else if (filterBox.getSelectedIndex() == 1)
        {
            try
            {
                con = DriverManager.getConnection("jdbc:derby://localhost:1527/PetsCare","root","root");
                st=con.createStatement();
                rs=st.executeQuery("SELECT FoodID, Food_Name, Price, Quantity FROM Food WHERE Quantity > 0");

                cartTable.setModel(DbUtils.resultSetToTableModel(rs));
            }
            catch(SQLException ex)
            {
                JOptionPane.showMessageDialog(this, ex);
            }
        }
        
        else
        {
            try
            {
                con = DriverManager.getConnection("jdbc:derby://localhost:1527/PetsCare","root","root");
                st=con.createStatement();
                rs=st.executeQuery("SELECT SuppliesID, Supplies_Name, Price, Quantity FROM Supplies WHERE Quantity > 0");

                cartTable.setModel(DbUtils.resultSetToTableModel(rs));
            }
            catch(SQLException ex)
            {
                JOptionPane.showMessageDialog(this, ex);
            }
        }
        
    }//GEN-LAST:event_filterBoxItemStateChanged
         
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cart().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel backLabel;
    private javax.swing.JList<String> billList;
    private javax.swing.JTable cartTable;
    private javax.swing.JButton checkoutButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox<String> filterBox;
    private javax.swing.JLabel imageLable2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField priceTxt;
    private javax.swing.JComboBox<String> quantityBox;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables
}
